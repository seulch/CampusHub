// =============================================================================
// EVENT REPORT IMPLEMENTATION
// =============================================================================

package com.campuseventhub.model.report;

import com.campuseventhub.model.event.Event;
import com.campuseventhub.model.event.EventStatus;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Event-specific report implementation providing event analytics and statistics.
 */
public class EventReport extends Report {
    private List<Event> events;
    private String organizerId;
    
    public EventReport(String organizerId, List<Event> events, String generatedBy) {
        super("Event Analytics Report", generatedBy);
        this.organizerId = organizerId;
        this.events = events;
    }
    
    @Override
    public void generate() {
        data = new HashMap<>();
        
        // Calculate event statistics
        long totalEvents = events.size();
        long publishedEvents = events.stream().filter(e -> e.getStatus() == EventStatus.PUBLISHED).count();
        long completedEvents = events.stream().filter(e -> e.getStatus() == EventStatus.COMPLETED).count();
        long cancelledEvents = events.stream().filter(e -> e.getStatus() == EventStatus.CANCELLED).count();
        
        // Calculate attendance statistics
        int totalRegistrations = events.stream().mapToInt(e -> e.getRegistrations().size()).sum();
        double averageAttendance = totalEvents > 0 ? (double) totalRegistrations / totalEvents : 0;
        
        data.put("totalEvents", totalEvents);
        data.put("publishedEvents", publishedEvents);
        data.put("completedEvents", completedEvents);
        data.put("cancelledEvents", cancelledEvents);
        data.put("totalRegistrations", totalRegistrations);
        data.put("averageAttendance", averageAttendance);
        data.put("organizerId", organizerId);
    }
    
    @Override
    public String export(String format) {
        if (data == null) {
            generate();
        }
        
        if ("CSV".equalsIgnoreCase(format)) {
            return exportToCsv();
        } else if ("JSON".equalsIgnoreCase(format)) {
            return exportToJson();
        } else {
            return exportToText();
        }
    }
    
    @Override
    public Map<String, Object> getSummary() {
        if (data == null) {
            generate();
        }
        
        Map<String, Object> summary = new HashMap<>();
        summary.put("reportType", "Event Report");
        summary.put("totalEvents", data.get("totalEvents"));
        summary.put("totalRegistrations", data.get("totalRegistrations"));
        summary.put("generatedAt", generatedAt);
        
        return summary;
    }
    
    private String exportToCsv() {
        StringBuilder csv = new StringBuilder();
        csv.append("Metric,Value\n");
        data.forEach((key, value) -> csv.append(key).append(",").append(value).append("\n"));
        return csv.toString();
    }
    
    private String exportToJson() {
        StringBuilder json = new StringBuilder();
        json.append("{\n");
        json.append("  \"reportType\": \"EventReport\",\n");
        json.append("  \"generatedAt\": \"").append(generatedAt).append("\",\n");
        json.append("  \"data\": {\n");
        
        data.forEach((key, value) -> {
            json.append("    \"").append(key).append("\": ");
            if (value instanceof String) {
                json.append("\"").append(value).append("\"");
            } else {
                json.append(value);
            }
            json.append(",\n");
        });
        
        if (json.toString().endsWith(",\n")) {
            json.setLength(json.length() - 2);
            json.append("\n");
        }
        
        json.append("  }\n");
        json.append("}");
        return json.toString();
    }
    
    private String exportToText() {
        StringBuilder text = new StringBuilder();
        text.append("EVENT ANALYTICS REPORT\n");
        text.append("======================\n\n");
        text.append("Generated: ").append(generatedAt).append("\n");
        text.append("Generated by: ").append(generatedBy).append("\n\n");
        
        text.append("EVENT STATISTICS:\n");
        text.append("Total Events: ").append(data.get("totalEvents")).append("\n");
        text.append("Published Events: ").append(data.get("publishedEvents")).append("\n");
        text.append("Completed Events: ").append(data.get("completedEvents")).append("\n");
        text.append("Cancelled Events: ").append(data.get("cancelledEvents")).append("\n\n");
        
        text.append("ATTENDANCE STATISTICS:\n");
        text.append("Total Registrations: ").append(data.get("totalRegistrations")).append("\n");
        text.append("Average Attendance: ").append(String.format("%.2f", data.get("averageAttendance"))).append("\n");
        
        return text.toString();
    }
}