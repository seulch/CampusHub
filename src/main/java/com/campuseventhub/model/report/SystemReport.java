// =============================================================================
// SYSTEM REPORT IMPLEMENTATION
// =============================================================================

package com.campuseventhub.model.report;

import java.util.HashMap;
import java.util.Map;

/**
 * System-wide report implementation providing overall system analytics and health metrics.
 */
public class SystemReport extends Report {
    private Map<String, Object> systemMetrics;
    
    public SystemReport(Map<String, Object> systemMetrics, String generatedBy) {
        super("System Health Report", generatedBy);
        this.systemMetrics = systemMetrics;
    }
    
    @Override
    public void generate() {
        data = new HashMap<>();
        
        // System performance metrics
        long totalUsers = (Long) systemMetrics.getOrDefault("totalUsers", 0L);
        long totalEvents = (Long) systemMetrics.getOrDefault("totalEvents", 0L);
        long totalVenues = (Long) systemMetrics.getOrDefault("totalVenues", 0L);
        long totalRegistrations = (Long) systemMetrics.getOrDefault("totalRegistrations", 0L);
        
        // System activity metrics
        long activeEvents = (Long) systemMetrics.getOrDefault("activeEvents", 0L);
        long completedEvents = (Long) systemMetrics.getOrDefault("completedEvents", 0L);
        double systemUtilization = totalEvents > 0 ? (double) activeEvents / totalEvents * 100 : 0;
        
        // Data integrity metrics
        boolean dataIntegrity = (Boolean) systemMetrics.getOrDefault("dataIntegrity", true);
        String lastBackup = (String) systemMetrics.getOrDefault("lastBackup", "Unknown");
        
        data.put("totalUsers", totalUsers);
        data.put("totalEvents", totalEvents);
        data.put("totalVenues", totalVenues);
        data.put("totalRegistrations", totalRegistrations);
        data.put("activeEvents", activeEvents);
        data.put("completedEvents", completedEvents);
        data.put("systemUtilization", systemUtilization);
        data.put("dataIntegrity", dataIntegrity);
        data.put("lastBackup", lastBackup);
    }
    
    @Override
    public String export(String format) {
        if (data == null) {
            generate();
        }
        
        if ("CSV".equalsIgnoreCase(format)) {
            return exportToCsv();
        } else if ("JSON".equalsIgnoreCase(format)) {
            return exportToJson();
        } else {
            return exportToText();
        }
    }
    
    @Override
    public Map<String, Object> getSummary() {
        if (data == null) {
            generate();
        }
        
        Map<String, Object> summary = new HashMap<>();
        summary.put("reportType", "System Report");
        summary.put("totalUsers", data.get("totalUsers"));
        summary.put("totalEvents", data.get("totalEvents"));
        summary.put("systemUtilization", data.get("systemUtilization"));
        summary.put("generatedAt", generatedAt);
        
        return summary;
    }
    
    private String exportToCsv() {
        StringBuilder csv = new StringBuilder();
        csv.append("Metric,Value\n");
        data.forEach((key, value) -> csv.append(key).append(",").append(value).append("\n"));
        return csv.toString();
    }
    
    private String exportToJson() {
        StringBuilder json = new StringBuilder();
        json.append("{\n");
        json.append("  \"reportType\": \"SystemReport\",\n");
        json.append("  \"generatedAt\": \"").append(generatedAt).append("\",\n");
        json.append("  \"data\": {\n");
        
        data.forEach((key, value) -> {
            json.append("    \"").append(key).append("\": ");
            if (value instanceof String) {
                json.append("\"").append(value).append("\"");
            } else {
                json.append(value);
            }
            json.append(",\n");
        });
        
        if (json.toString().endsWith(",\n")) {
            json.setLength(json.length() - 2);
            json.append("\n");
        }
        
        json.append("  }\n");
        json.append("}");
        return json.toString();
    }
    
    private String exportToText() {
        StringBuilder text = new StringBuilder();
        text.append("SYSTEM HEALTH REPORT\n");
        text.append("====================\n\n");
        text.append("Generated: ").append(generatedAt).append("\n");
        text.append("Generated by: ").append(generatedBy).append("\n\n");
        
        text.append("SYSTEM OVERVIEW:\n");
        text.append("Total Users: ").append(data.get("totalUsers")).append("\n");
        text.append("Total Events: ").append(data.get("totalEvents")).append("\n");
        text.append("Total Venues: ").append(data.get("totalVenues")).append("\n");
        text.append("Total Registrations: ").append(data.get("totalRegistrations")).append("\n\n");
        
        text.append("SYSTEM ACTIVITY:\n");
        text.append("Active Events: ").append(data.get("activeEvents")).append("\n");
        text.append("Completed Events: ").append(data.get("completedEvents")).append("\n");
        text.append("System Utilization: ").append(String.format("%.2f%%", data.get("systemUtilization"))).append("\n\n");
        
        text.append("SYSTEM HEALTH:\n");
        text.append("Data Integrity: ").append((Boolean) data.get("dataIntegrity") ? "OK" : "WARNING").append("\n");
        text.append("Last Backup: ").append(data.get("lastBackup")).append("\n");
        
        return text.toString();
    }
}