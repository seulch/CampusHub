// =============================================================================
// USER REPORT IMPLEMENTATION
// =============================================================================

package com.campuseventhub.model.report;

import com.campuseventhub.model.user.User;
import com.campuseventhub.model.user.UserRole;
import com.campuseventhub.model.user.UserStatus;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * User-specific report implementation providing user analytics and statistics.
 */
public class UserReport extends Report {
    private List<User> users;
    
    public UserReport(List<User> users, String generatedBy) {
        super("User Analytics Report", generatedBy);
        this.users = users;
    }
    
    @Override
    public void generate() {
        data = new HashMap<>();
        
        // Calculate user statistics by role
        long totalUsers = users.size();
        long attendeeCount = users.stream().filter(u -> u.getRole() == UserRole.ATTENDEE).count();
        long organizerCount = users.stream().filter(u -> u.getRole() == UserRole.ORGANIZER).count();
        long adminCount = users.stream().filter(u -> u.getRole() == UserRole.ADMIN).count();
        
        // Calculate user statistics by status
        long activeUsers = users.stream().filter(u -> u.getStatus() == UserStatus.ACTIVE).count();
        long pendingUsers = users.stream().filter(u -> u.getStatus() == UserStatus.PENDING_APPROVAL).count();
        long suspendedUsers = users.stream().filter(u -> u.getStatus() == UserStatus.SUSPENDED).count();
        
        data.put("totalUsers", totalUsers);
        data.put("attendeeCount", attendeeCount);
        data.put("organizerCount", organizerCount);
        data.put("adminCount", adminCount);
        data.put("activeUsers", activeUsers);
        data.put("pendingUsers", pendingUsers);
        data.put("suspendedUsers", suspendedUsers);
    }
    
    @Override
    public String export(String format) {
        if (data == null) {
            generate();
        }
        
        if ("CSV".equalsIgnoreCase(format)) {
            return exportToCsv();
        } else if ("JSON".equalsIgnoreCase(format)) {
            return exportToJson();
        } else {
            return exportToText();
        }
    }
    
    @Override
    public Map<String, Object> getSummary() {
        if (data == null) {
            generate();
        }
        
        Map<String, Object> summary = new HashMap<>();
        summary.put("reportType", "User Report");
        summary.put("totalUsers", data.get("totalUsers"));
        summary.put("activeUsers", data.get("activeUsers"));
        summary.put("generatedAt", generatedAt);
        
        return summary;
    }
    
    private String exportToCsv() {
        StringBuilder csv = new StringBuilder();
        csv.append("Metric,Value\n");
        data.forEach((key, value) -> csv.append(key).append(",").append(value).append("\n"));
        return csv.toString();
    }
    
    private String exportToJson() {
        StringBuilder json = new StringBuilder();
        json.append("{\n");
        json.append("  \"reportType\": \"UserReport\",\n");
        json.append("  \"generatedAt\": \"").append(generatedAt).append("\",\n");
        json.append("  \"data\": {\n");
        
        data.forEach((key, value) -> {
            json.append("    \"").append(key).append("\": ").append(value).append(",\n");
        });
        
        if (json.toString().endsWith(",\n")) {
            json.setLength(json.length() - 2);
            json.append("\n");
        }
        
        json.append("  }\n");
        json.append("}");
        return json.toString();
    }
    
    private String exportToText() {
        StringBuilder text = new StringBuilder();
        text.append("USER ANALYTICS REPORT\n");
        text.append("=====================\n\n");
        text.append("Generated: ").append(generatedAt).append("\n");
        text.append("Generated by: ").append(generatedBy).append("\n\n");
        
        text.append("USER STATISTICS BY ROLE:\n");
        text.append("Total Users: ").append(data.get("totalUsers")).append("\n");
        text.append("Attendees: ").append(data.get("attendeeCount")).append("\n");
        text.append("Organizers: ").append(data.get("organizerCount")).append("\n");
        text.append("Administrators: ").append(data.get("adminCount")).append("\n\n");
        
        text.append("USER STATISTICS BY STATUS:\n");
        text.append("Active Users: ").append(data.get("activeUsers")).append("\n");
        text.append("Pending Approval: ").append(data.get("pendingUsers")).append("\n");
        text.append("Suspended Users: ").append(data.get("suspendedUsers")).append("\n");
        
        return text.toString();
    }
}